name: k8sCI
on:
 push:
   branches:
     - dev
permissions:
 contents: write
env:
 DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME2 }}
 DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD2 }}
 ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
jobs:
 build-and-push:
   runs-on: ubuntu-latest
   steps:
     - name: Checkout
       uses: actions/checkout@v3
       with:
         token: ${{ secrets.MY_GITHUB_TOKEN }}
     
     - name: Set up JDK 17
       uses: actions/setup-java@v3
       with:
         java-version: '17'
         distribution: 'temurin'
     
     - name: Create application file
       run: |
         mkdir -p ./src/main/resources
         touch ./src/main/resources/application.yml
     
     - name: Set up application.yml
       run: echo "${{ secrets.DG_SESSIONQ_YAML}}" > ./src/main/resources/application.yml
     
     - name: Build with Gradle
       run: |
         chmod +x ./gradlew
         ./gradlew build -x test
     
     - name: Generate Tags
       id: tags
       run: |
         # front-빌드번호 형식으로 태그 생성
         TAG="sessionQ-${{ github.run_number }}"
         echo "image_tag=${TAG}" >> $GITHUB_OUTPUT
         echo "Generated tag: ${TAG}"
     
     - name: Log in to Amazon ECR
       env:
         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         AWS_REGION: ${{ secrets.AWS_REGION }}
       run: |
         aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY
     
     - name: Build and Push Docker Image
       run: |
         # 이미지 빌드 (auth- prefix 추가된 태그) ex) tag:auth-1
         docker build -t $ECR_REPOSITORY:${{ steps.tags.outputs.image_tag }} .
         
         # latest 태그 추가
         docker tag $ECR_REPOSITORY:${{ steps.tags.outputs.image_tag }} $ECR_REPOSITORY:latest
         
         # 두 태그 모두 푸시
         docker push $ECR_REPOSITORY:${{ steps.tags.outputs.image_tag }}
         docker push $ECR_REPOSITORY:latest
         
         echo "Pushed tags: latest, ${{ steps.tags.outputs.image_tag }}"
     
     - name: Trigger ToArgoCD Workflow
       if: success()
       env:
         REPO: "mu1titap/argocd-manifests"
         PAT_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
       run: |
         curl -X POST -H "Authorization: token $PAT_TOKEN" \
           -H "Accept: application/vnd.github.v3+json" \
           https://api.github.com/repos/$REPO/dispatches \
           -d "{
             \"event_type\": \"ci-completed\",
             \"client_payload\": {
               \"repository\": \"$ECR_REPOSITORY\",
               \"tag\": \"${{ steps.tags.outputs.image_tag }}\",
               \"service_name\": \"session-request-query-service\"
             }
           }"
           

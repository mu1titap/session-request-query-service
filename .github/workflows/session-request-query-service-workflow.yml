name: session-request-query-service-workflow.yml

on:
  workflow_dispatch: # 수동 실행 (테스트)
  push:
    branches: [ "develop", "main" ]
  pull_request:
    branches: [ "develop", "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      #자바 버전 설정
      - name: setting JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ## gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-  

      # create application.yml
      - name: make application.yml
        uses: actions/checkout@v4
      - run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application.yml
          echo '${{ secrets.SESSION_REQUEST_QUERY_SERVICE_APPLICATION_YML }}' > ./application.yml
        shell: bash

      # 권한추가
      - name: grant execute permission for gradlew
        run: chmod +x gradlew

      # Spring Boot 어플리케이션 Build
      - name: Spring Boot Build
        run: ./gradlew clean build -x test

      # DockerHub Login
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Docker 이미지 Build
      - name: docker image build & docker Hub push
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/session-request-query-service .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/session-request-query-service

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # AWS 배포
      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            sudo docker stop ${{ secrets.SESSION_REQUEST_QUERY_SERVICE_CONTAINER_NAME }}  # 컨테이너 중지
            sudo docker rm -f ${{ secrets.SESSION_REQUEST_QUERY_SERVICE_CONTAINER_NAME }}  # 컨테이너 제거
            sudo docker rmi -f ${{ secrets.DOCKERHUB_USERNAME }}/session-request-query-service:latest  # 이미지 제거
            sudo docker run -d --name ${{ secrets.SESSION_REQUEST_QUERY_SERVICE_CONTAINER_NAME }} --network spring-cloud-network -p 9800:9800 ${{ secrets.DOCKERHUB_USERNAME }}/session-request-query-service:latest
